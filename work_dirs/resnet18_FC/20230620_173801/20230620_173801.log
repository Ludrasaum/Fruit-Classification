2023/06/20 17:38:07 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: win32
    Python: 3.7.11 (default, Jul 27 2021, 09:42:29) [MSC v.1916 64 bit (AMD64)]
    CUDA available: True
    numpy_random_seed: 2002842054
    GPU 0: NVIDIA GeForce RTX 3060 Laptop GPU
    CUDA_HOME: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.6
    NVCC: Cuda compilation tools, release 11.6, V11.6.55
    MSVC: 用于 x64 的 Microsoft (R) C/C++ 优化编译器 19.31.31106.2 版
    GCC: n/a
    PyTorch: 1.10.2
    PyTorch compiling details: PyTorch built with:
  - C++ Version: 199711
  - MSVC 192829337
  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 2019
  - LAPACK is enabled (usually provided by MKL)
  - CPU capability usage: AVX512
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.4
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/cb/pytorch_1000000000000/work/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.2, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, 

    TorchVision: 0.11.3
    OpenCV: 4.6.0
    MMEngine: 0.7.4

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 2002842054
    deterministic: False
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/06/20 17:38:07 - mmengine - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=18,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=2,
        in_channels=512,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, 5)),
    init_cfg=dict(
        type='Pretrained',
        checkpoint=
        '../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth'
    ))
dataset_type = 'CustomDataset'
data_preprocessor = dict(
    num_classes=2,
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', scale=224),
    dict(type='RandomFlip', prob=0.5, direction='horizontal'),
    dict(type='PackInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='ResizeEdge', scale=256, edge='short'),
    dict(type='CenterCrop', crop_size=224),
    dict(type='PackInputs')
]
train_dataloader = dict(
    pin_memory=True,
    persistent_workers=False,
    collate_fn=dict(type='default_collate'),
    batch_size=32,
    num_workers=0,
    dataset=dict(
        type='CustomDataset',
        data_root=
        '../fruit_classification_projects/Dataset/fruitData/training_set/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', scale=224),
            dict(type='RandomFlip', prob=0.5, direction='horizontal'),
            dict(type='PackInputs')
        ]),
    sampler=dict(type='DefaultSampler', shuffle=True))
val_dataloader = dict(
    pin_memory=True,
    persistent_workers=False,
    collate_fn=dict(type='default_collate'),
    batch_size=32,
    num_workers=0,
    dataset=dict(
        type='CustomDataset',
        data_root='../fruit_classification_projects/Dataset/fruitData/val_set/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='ResizeEdge', scale=256, edge='short'),
            dict(type='CenterCrop', crop_size=224),
            dict(type='PackInputs')
        ]),
    sampler=dict(type='DefaultSampler', shuffle=False))
val_evaluator = dict(type='Accuracy', topk=1)
test_dataloader = dict(
    pin_memory=True,
    persistent_workers=False,
    collate_fn=dict(type='default_collate'),
    batch_size=32,
    num_workers=0,
    dataset=dict(
        type='CustomDataset',
        data_root='../fruit_classification_projects/Dataset/fruitData/val_set/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='ResizeEdge', scale=256, edge='short'),
            dict(type='CenterCrop', crop_size=224),
            dict(type='PackInputs')
        ]),
    sampler=dict(type='DefaultSampler', shuffle=False))
test_evaluator = dict(type='Accuracy', topk=1)
optim_wrapper = dict(
    optimizer=dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001))
param_scheduler = dict(
    type='MultiStepLR', by_epoch=True, milestones=[30, 60, 90], gamma=0.1)
train_cfg = dict(by_epoch=True, max_epochs=5, val_interval=1)
val_cfg = dict()
test_cfg = dict()
default_scope = 'mmpretrain'
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=100),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(
        type='CheckpointHook', interval=1, max_keep_ckpts=5, save_best='auto'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='VisualizationHook', enable=False))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='UniversalVisualizer', vis_backends=[dict(type='LocalVisBackend')])
log_level = 'INFO'
load_from = None
resume = False
randomness = dict(seed=None, deterministic=False)
launcher = 'none'
work_dir = './work_dirs\\resnet18_FC'

2023/06/20 17:38:11 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/06/20 17:38:11 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/06/20 17:38:12 - mmengine - INFO - load model from: ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth
2023/06/20 17:38:12 - mmengine - INFO - Loads checkpoint by local backend from path: ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth
2023/06/20 17:38:12 - mmengine - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 512]) from checkpoint, the shape in current model is torch.Size([2, 512]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([2]).
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer1.1.conv1.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer2.0.conv1.weight - torch.Size([128, 64, 3, 3]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer2.0.downsample.0.weight - torch.Size([128, 64, 1, 1]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer2.0.downsample.1.weight - torch.Size([128]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer2.0.downsample.1.bias - torch.Size([128]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer2.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer3.0.conv1.weight - torch.Size([256, 128, 3, 3]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer3.0.downsample.0.weight - torch.Size([256, 128, 1, 1]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer3.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer3.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer3.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer4.0.conv1.weight - torch.Size([512, 256, 3, 3]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer4.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer4.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer4.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer4.1.conv1.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from ../fruit_classification_projects/pretrainedModel/resnet18_8xb32_in1k.pth 

head.fc.weight - torch.Size([2, 512]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 
2023/06/20 17:38:12 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/06/20 17:38:12 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/06/20 17:38:12 - mmengine - INFO - Checkpoints will be saved to G:\weneedwork\MMLab\Pretrain\fruit_classification_projects\work_dirs\resnet18_FC.
2023/06/20 17:38:38 - mmengine - INFO - Exp name: resnet18_FC_20230620_173801
2023/06/20 17:38:38 - mmengine - INFO - Epoch(train) [1][70/70]  lr: 1.0000e-02  eta: 0:01:43  time: 0.3015  data_time: 0.1868  memory: 876  loss: 0.0957
2023/06/20 17:38:38 - mmengine - INFO - Saving checkpoint at 1 epochs
2023/06/20 17:38:43 - mmengine - INFO - Epoch(val) [1][8/8]    accuracy/top1: 92.9204  data_time: 0.1493  time: 0.2654
2023/06/20 17:38:45 - mmengine - INFO - The best checkpoint with 92.9204 accuracy/top1 at 1 epoch is saved to best_accuracy_top1_epoch_1.pth.
2023/06/20 17:38:56 - mmengine - INFO - Exp name: resnet18_FC_20230620_173801
2023/06/20 17:38:56 - mmengine - INFO - Epoch(train) [2][70/70]  lr: 1.0000e-02  eta: 0:00:51  time: 0.1155  data_time: 0.0444  memory: 876  loss: 0.1767
2023/06/20 17:38:56 - mmengine - INFO - Saving checkpoint at 2 epochs
2023/06/20 17:39:00 - mmengine - INFO - Epoch(val) [2][8/8]    accuracy/top1: 89.8230  data_time: 0.0326  time: 0.0939
2023/06/20 17:39:08 - mmengine - INFO - Exp name: resnet18_FC_20230620_173801
2023/06/20 17:39:08 - mmengine - INFO - Epoch(train) [3][70/70]  lr: 1.0000e-02  eta: 0:00:28  time: 0.1203  data_time: 0.0428  memory: 876  loss: 0.0139
2023/06/20 17:39:08 - mmengine - INFO - Saving checkpoint at 3 epochs
2023/06/20 17:39:12 - mmengine - INFO - Epoch(val) [3][8/8]    accuracy/top1: 85.3982  data_time: 0.0305  time: 0.1027
2023/06/20 17:39:21 - mmengine - INFO - Exp name: resnet18_FC_20230620_173801
2023/06/20 17:39:21 - mmengine - INFO - Epoch(train) [4][70/70]  lr: 1.0000e-02  eta: 0:00:12  time: 0.1199  data_time: 0.0445  memory: 876  loss: 0.0541
2023/06/20 17:39:21 - mmengine - INFO - Saving checkpoint at 4 epochs
2023/06/20 17:39:25 - mmengine - INFO - Epoch(val) [4][8/8]    accuracy/top1: 86.7257  data_time: 0.0326  time: 0.0994
2023/06/20 17:39:34 - mmengine - INFO - Exp name: resnet18_FC_20230620_173801
2023/06/20 17:39:34 - mmengine - INFO - Epoch(train) [5][70/70]  lr: 1.0000e-02  eta: 0:00:00  time: 0.1231  data_time: 0.0449  memory: 876  loss: 0.0447
2023/06/20 17:39:34 - mmengine - INFO - Saving checkpoint at 5 epochs
2023/06/20 17:39:38 - mmengine - INFO - Epoch(val) [5][8/8]    accuracy/top1: 93.8053  data_time: 0.0330  time: 0.0995
2023/06/20 17:39:38 - mmengine - INFO - The previous best checkpoint G:\weneedwork\MMLab\Pretrain\fruit_classification_projects\work_dirs\resnet18_FC\best_accuracy_top1_epoch_1.pth is removed
2023/06/20 17:39:39 - mmengine - INFO - The best checkpoint with 93.8053 accuracy/top1 at 5 epoch is saved to best_accuracy_top1_epoch_5.pth.
